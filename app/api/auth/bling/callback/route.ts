import { type NextRequest, NextResponse } from "next/server"
import { BlingAuth } from "@/lib/bling-auth"
import { BlingErrorHandler } from "@/lib/bling-error-handler"

/**
 * Callback OAuth 2.0 do Bling
 * https://developer.bling.com.br/aplicativos#obten√ß√£o-do-authorization-code
 */
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const code = searchParams.get("code")
    const state = searchParams.get("state")
    const error = searchParams.get("error")
    const errorDescription = searchParams.get("error_description")

    console.log("üì• Callback OAuth recebido:", { code: !!code, state, error })

    // Verifica se houve erro na autoriza√ß√£o
    if (error) {
      console.error("‚ùå Erro na autoriza√ß√£o:", error, errorDescription)

      const errorMessage = this.getAuthorizationErrorMessage(error, errorDescription)
      return NextResponse.redirect(
        new URL(`/configuracao-bling?error=${encodeURIComponent(errorMessage)}`, request.url),
      )
    }

    // Verifica se o c√≥digo foi fornecido
    if (!code) {
      console.error("‚ùå C√≥digo de autoriza√ß√£o n√£o fornecido")
      return NextResponse.redirect(
        new URL("/configuracao-bling?error=C√≥digo de autoriza√ß√£o n√£o fornecido", request.url),
      )
    }

    // Troca o c√≥digo pelos tokens
    const tokens = await BlingAuth.exchangeCodeForTokens(code)

    console.log("‚úÖ Autentica√ß√£o realizada com sucesso")

    // Redireciona para p√°gina de sucesso
    return NextResponse.redirect(new URL("/configuracao-bling?success=true", request.url))
  } catch (error) {
    console.error("‚ùå Erro no callback OAuth:", error)

    const errorDetails = BlingErrorHandler.processApiError(error)
    const userMessage = BlingErrorHandler.getUserFriendlyMessage(error)

    return NextResponse.redirect(new URL(`/configuracao-bling?error=${encodeURIComponent(userMessage)}`, request.url))
  }
}

/**
 * Mapeia erros de autoriza√ß√£o para mensagens amig√°veis
 */
function getAuthorizationErrorMessage(error: string, description?: string | null): string {
  const errorMessages: Record<string, string> = {
    access_denied: "Acesso negado pelo usu√°rio",
    invalid_request: "Requisi√ß√£o inv√°lida",
    invalid_client: "Cliente OAuth inv√°lido",
    invalid_scope: "Escopo inv√°lido",
    server_error: "Erro interno do servidor",
    temporarily_unavailable: "Servi√ßo temporariamente indispon√≠vel",
    unsupported_response_type: "Tipo de resposta n√£o suportado",
    unauthorized_client: "Cliente n√£o autorizado",
  }

  return errorMessages[error] || description || `Erro de autoriza√ß√£o: ${error}`
}
